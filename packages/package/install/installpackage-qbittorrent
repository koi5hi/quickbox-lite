#!/bin/bash
#
# [QuickBox Lite qBittorrent Installer]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.5.11
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

function _version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="qBittorrent"
APP_NAME="qbittorrent"
APP_SERVICE="qbittorrent"
APP_HOST="127.0.0.1"

# RANDOM PORT
APP_WEB_PORT_LOW="15151"
APP_WEB_PORT_HIGH="15200"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
qbitversion_default=4.6.7
libtversion_default=1.2.19
cdn=$(cat /install/.cdn.lock)

BRANCH_LT="https://github.com/arvidn/libtorrent.git"
BRANCH_QBIT="https://github.com/qbittorrent/qBittorrent.git"
BRANCH_LIBQBPASS="https://github.com/KozakaiAya/libqbpasswd.git"
################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Installer"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [-s static] [--lt] [--qb]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "--lt <version>            the Libtorrent version you want to install"
	echo "--qb <version>            the qBittorrent version you want to install"
	echo "--with-cf                 use cloudflare instead of github"
	echo "--with-sf                 use sourceforge instead of github"
	echo "--with-osdn               use osdn(jp)  instead of github"
	echo "--with-github             use github"	
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# INSTALL FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} already installed !"
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	echo "$APP_TITLE Install Complete!


Close this dialog box to refresh your browser" >>"${OUTTO}" 2>&1
	rm -f /install/.install.lock
}

function _installInfo() {
	_print "
$APP_TITLE will now be installed.

This process may take a few minutes
Please wait until the process is completed
"
}

function _installSystemUpdates() {
	_info "Checking and performing updates to system... "
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
	DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
	## auto solve lock
	if [ "$?" -eq 2 ]; then
		_warning "dpkg database is locked."
		_info "fixing dpkg lock..."
		rm -f /var/lib/dpkg/updates/0*
		locks=$(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*)
		if [[ ${locks} == $(find /var/lib/dpkg/lock* && find /var/cache/apt/archives/lock*) ]]; then
			for l in ${locks}; do
				rm -rf ${l}
			done
			_execute "dpkg --configure -a"
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" update >/dev/null 2>&1
			DEBIAN_FRONTEND=noninteractive apt-get -yqq -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" upgrade >/dev/null 2>&1
		fi
		if ! (apt-get check >/dev/null); then
			apt-get install -f >>"${OUTTO}" 2>&1
			if ! (apt-get check >/dev/null); then
				whiptail --title "$ERROR_TITLE_INSTALL" --msgbox "$ERROR_TEXT_INSTALL_1" --ok-button "$BUTTON_OK" 8 72
				exit 1
			fi
		fi
	fi
	_success "System updated."
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}

function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install -N fpm"
		_success "fpm installed."
	fi
}

function _cf() {
	DOMAIN="deb.ezapi.net"
	SUBFOLDER=""
	ARCH="amd64"
	SUFFIX=""
}

function _sf() {
	DOMAIN="sourceforge.net"
	SUBFOLDER="projects/seedbox-software-for-linux/files/"
	ARCH="amd64"
	SUFFIX="/download"
}

function _osdn() {
	DOMAIN="osdn.dl.osdn.net"
	SUBFOLDER="storage/g/s/se/seedbox-software-for-linux/"
	ARCH="amd64"
	SUFFIX=""
}

function _github() {
	DOMAIN="raw.githubusercontent.com"
	SUBFOLDER="amefs/quickbox-files/master/"
	ARCH="amd64"
	SUFFIX=""
}

function _download() {
	# init download url
	PACKAGE=$1
	DEB=$2
	case "$cdn" in
	"cf")
		_cf
		wget -t3 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"sf")
		_sf
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"osdn")
		_osdn
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"github")
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	*)
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	esac
}

function _installStatic() {
	if [[ -n ${static_binary} ]]; then
		cd /tmp || exit 1
		wget -t3 -T20 -q -O /usr/local/bin/qbittorrent-nox https://qbit-static.ezapi.net/${static_binary}
		chmod +x /usr/local/bin/qbittorrent-nox
	else
		if [[ ! -f /install/.docker.lock ]]; then
			_info "Install docker for building qBittorrent... "
			rm -f /install/.install.lock
			bash /usr/local/bin/quickbox/package/install/installpackage-docker -l $OUTTO
			echo "qBittorrent" >/install/.install.lock
		fi
			case ${libtversion} in
			1.2.0) libttag="libtorrent_1_2_0" ;;
			1.2.1) libttag="libtorrent_1_2_1" ;;
			1.2.2) libttag="libtorrent_1_2_2" ;;
			1.2.3) libttag="libtorrent_1_2_3" ;;
			1.2.4) libttag="libtorrent_1_2_4" ;;
			1.2.5) libttag="libtorrent_1_2_5" ;;
			1.2.6) libttag="libtorrent_1_2_6" ;;
			1.2.7) libttag="libtorrent_1_2_7" ;;
			1.2.8) libttag="libtorrent-1.2.8" ;;
			1.2.9) libttag="libtorrent-1.2.9" ;;
			1.2.10) libttag="libtorrent-1.2.10" ;;
			1.2.11) libttag="v1.2.11" ;;
			1.2.12) libttag="v1.2.12" ;;
			1.2.13) libttag="v1.2.13" ;;
			1.2.14) libttag="v1.2.14" ;;
			1.1.0) libttag="libtorrent-1_1" ;;
			1.1.1) libttag="libtorrent-1_1_1" ;;
			1.1.2) libttag="libtorrent-1_1_2" ;;
			1.1.3) libttag="libtorrent-1_1_3" ;;
			1.1.4) libttag="libtorrent-1_1_4" ;;
			1.1.5) libttag="libtorrent-1_1_5" ;;
			1.1.6) libttag="libtorrent-1_1_6" ;;
			1.1.7) libttag="libtorrent-1_1_7" ;;
			1.1.8) libttag="libtorrent-1_1_8" ;;
			1.1.9) libttag="libtorrent-1_1_9" ;;
			1.1.10) libttag="libtorrent-1_1_10" ;;
			1.1.11) libttag="libtorrent-1_1_11" ;;
			1.1.12) libttag="libtorrent-1_1_12" ;;
			1.1.13) libttag="libtorrent-1_1_13" ;;
			1.1.14) libttag="libtorrent-1_1_14" ;;
			*) libttag="v${libtversion}" ;;
			esac
		_info "building static qBittorrent... "
		cd /tmp || exit 1
		mkdir -p /tmp/qb-static
		curl -sLo /tmp/qb-static/qbittorrent-nox-static.sh git.io/qbstatic && chmod +x /tmp/qb-static/qbittorrent-nox-static.sh
		docker run -it -v /tmp/qb-static:/root alpine:latest /bin/ash -c "apk update && apk add bash curl && cd && bash ./qbittorrent-nox-static.sh all -i -lt \"${libttag}\" -qt \"release-${qbitversion}\" --cmake" >> $OUTTO 2>&1
		cp /tmp/qb-static/qbt-build/completed/qbittorrent-nox /usr/local/bin/qbittorrent-nox
		chmod +x /usr/local/bin/qbittorrent-nox
		_info "cleaning up... "
		rm -rf /tmp/qb-static
	fi
}

function _installApp() {
	_info "Building ${APP_TITLE}..."
	if [ -z "${qbitversion}" ]; then
		qbitversion=${qbitversion_default}
	fi
	if [ -z "${libtversion}" ]; then
		libtversion=${libtversion_default}
	fi
	qbit_major_version=$(echo ${qbitversion}| cut -d. -f1,2)
	libt_major_version=$(echo ${libtversion}| cut -d. -f1,2)
	# version check
	libt_fallback=false
	if [[ ${qbit_major_version} == "4.1" ]]; then
		if [[ ${libtversion_default} != "1.1" ]]; then
			libtversion="1.1.14"
			libt_major_version="1.1"
			libt_fallback=true
		fi
	fi
	if ${libt_fallback}; then _warning "Use Libtorrent ${libtversion} for ${qbit_major_version}.x"; fi
	# Static linking
	_info "Fetching package list..."
	cd /tmp || exit 1
	wget -t3 -T20 -q -O file.lst https://qbit-static.ezapi.net/file.lst
	static_binary=$(cat file.lst | grep -w "qbittorrent-nox.qbit${qbitversion}_lt${libtversion}.amd64" | awk '{ print $4}')
	rm -f file.lst
	_installStatic

	_success "${APP_TITLE} Built."
}

function _configureApp() {
	_info "Configuring ${APP_TITLE}..."

	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		# get used port
		local usedport=""
		if (find /install/ -type f | grep -q .$APP_NAME.port); then
			usedport=$(cat $(find /install/ -type f | grep .$APP_NAME.port))
		fi
		# generate available port
		PORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		while [[ "$(netstat -ln | grep ':'"$PORT"'' | grep -c 'LISTEN')" -eq "1" || $usedport =~ $PORT ]]; do
			PORT=$(shuf -i ${APP_WEB_PORT_LOW}-${APP_WEB_PORT_HIGH} -n 1)
		done
		echo "$PORT" >/install/$username.$APP_NAME.port
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)

		mkdir -p /home/${username}/.config/qBittorrent
		ha1pass=$(echo -n "${password}" | md5sum | cut -f1 -d' ')
		cat >/home/${username}/.config/qBittorrent/qBittorrent.conf <<QBC
[AutoRun]
enabled=false
program=

[LegalNotice]
Accepted=true

[Preferences]
Bittorrent\AddTrackers=false
Bittorrent\MaxRatioAction=0
Bittorrent\PeX=true
Bittorrent\Encryption=0
Connection\GlobalDLLimitAlt=10
Connection\GlobalUPLimitAlt=10
Downloads\DiskWriteCacheSize=64
Downloads\DiskWriteCacheTTL=60
Downloads\PreAllocation=true
Downloads\SavePath=/home/${username}/torrents/qbittorrent
Downloads\ScanDirsV2=@Variant(\0\0\0\x1c\0\0\0\0)
Downloads\StartInPause=false
General\Locale=
General\UseRandomPort=true
WebUI\Address=${APP_HOST}
WebUI\AuthSubnetWhitelist=@Invalid()
WebUI\AuthSubnetWhitelistEnabled=false
WebUI\HTTPS\Enabled=false
WebUI\LocalHostAuth=false
WebUI\Password_ha1=@ByteArray(${ha1pass})
WebUI\Port=${PORT}
WebUI\ServerDomains=*
WebUI\UseUPnP=false
WebUI\Username=${username}

[BitTorrent]
Session\GuidedReadCache=true
Session\ChokingAlgorithm=FixedSlots
Session\SeedChokingAlgorithm=FastestUpload
Session\MultiConnectionsPerIp=true
Session\BTProtocol=Both
Session\CreateTorrentSubfolder=true
Session\DisableAutoTMMByDefault=true
Session\DisableAutoTMMTriggers\CategoryChanged=true
Session\DisableAutoTMMTriggers\CategorySavePathChanged=true
Session\DisableAutoTMMTriggers\DefaultSavePathChanged=true
Session\SendBufferWatermark=500
Session\SendBufferLowWatermark=10
Session\SendBufferWatermarkFactor=50
QBC
		
		chown -R ${username}:${username} /home/${username}/.config/
		mkdir -p /home/${username}/qbwatch
		chown ${username}: /home/${username}/qbwatch
		mkdir -p /home/${username}/torrents/qbittorrent
		chown -R ${username}: /home/${username}/torrents

		cat >/etc/nginx/conf.d/${username}.qbittorrent.conf <<EOF
upstream ${username}.qbittorrent {
  server 127.0.0.1:$PORT;
}
EOF
		cat >>/etc/nginx/apps/${username}.qbitdlindex.conf <<EOF
location /${username}.qbittorrent.downloads {
  alias /home/${username}/torrents/qbittorrent;
  include /etc/nginx/snippets/fancyindex.conf;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.${username};

  location ~* \.php$ {

  }
}
EOF
		if [[ -f /install/.${username}.flexget.lock ]]; then
			sed -i "s/QBPORT/${PORT}/g" /home/${username}/.config/flexget/config.yml
		fi
		if [[ -f /install/.${username}.autoremovetorrents.lock ]]; then
			sed -i "s/QBPORT/${PORT}/g" /home/${username}/.config/autoremovetorrents/config.yml
		fi
	done

	cat >/etc/nginx/apps/qbittorrent.conf <<'QBRP'
location /qbittorrent {
  return 301 /qbittorrent/;
}

location /qbittorrent/ {
  include /etc/nginx/snippets/proxy.conf;
  auth_basic "Password Required";
  auth_basic_user_file /etc/htpasswd.d/htpasswd.$remote_user;
  proxy_set_header        X-Forwarded-Host        $server_name:$server_port;
  proxy_hide_header       Referer;
  proxy_hide_header       Origin;
  proxy_set_header        Referer                 '';
  proxy_set_header        Origin                  '';
  add_header              X-Frame-Options         "SAMEORIGIN";
  rewrite ^/qbittorrent/(.*) /$1 break;
  proxy_pass  http://$remote_user.qbittorrent;
}
QBRP

	BINPATH=$(which qbittorrent-nox)
	cat >/etc/systemd/system/qbittorrent@.service <<QBS
[Unit]
Description=qBittorrent Daemon Service
After=network.target

[Service]
Environment="SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt"
Environment="SSL_CERT_DIR=/etc/ssl/certs"
Type=exec
User=%I
LimitNOFILE=infinity
ExecStart=${BINPATH}
ExecStop=/usr/bin/killall -w -s 9 ${BINPATH}
TimeoutSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
QBS

	_execute "systemctl daemon-reload"
	_execute "nginx -s reload"
	_success "${APP_TITLE} configured."
}

function _installAppLock() {
	_info "Configuring ${APP_TITLE} lock..."
	touch /install/${APP_LOCK}
	_success "${APP_TITLE} lock configured."
}

function _installAppStart() {
	_info "Starting ${APP_TITLE}..."
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		_execute "systemctl enable ${APP_SERVICE}@${username}"
		_execute "systemctl start ${APP_SERVICE}@${username}"
		sleep 5
		if (_version_gt ${qbitversion} 4.1.9.1); then
			curl -i --data 'json={"scan_dirs":{"'"/home/${username}/qbwatch"'":1}}' http://localhost:$(cat /install/${username}.$APP_NAME.port)/api/v2/app/setPreferences >>"${OUTTO}" 2>&1
		else
			curl -i --data 'json={"scan_dirs":{"'"/home/${username}/qbwatch"'":1}}' http://localhost:$(cat /install/${username}.$APP_NAME.port)/command/setPreferences >>"${OUTTO}" 2>&1
		fi
		if [[ -d /home/${username}/.local/share/data/qBittorrent ]]; then
			chmod -R 755 /home/"${username}"/.local/share/data/qBittorrent
		else
			chmod -R 755 /home/"${username}"/.local/share/qBittorrent
		fi
	done
	_success "${APP_TITLE} started."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hsl: -l help,static,with-cf,with-sf,with-osdn,with-github,log:,qb:,lt: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--qb)
		qbitversion="$2"
		shift
		;;
	--lt)
		libtversion="$2"
		shift
		;;
	--with-cf)
		cdn="cf"
		;;
	--with-sf)
		cdn="sf"
		;;
	--with-osdn)
		cdn="osdn"
		;;
	--with-github)
		cdn="github"
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_installInfo
if [[ ! -f /install/.system.lock ]]; then
	_installSystemUpdates
fi
_installApp
_configureApp
_installAppLock
_installAppStart
_lockCleanup