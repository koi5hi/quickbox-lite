#!/bin/bash
#
# [QuickBox Lite qBittorrent Updater]
#
# GitHub:   https://github.com/amefs/quickbox-lite
# Author:   Amefs
# Current version:  v1.5.11
# URL:
# Original Repo:    https://github.com/QuickBox/QB
# Credits to:       QuickBox.io
#
# SPDX-License-Identifier: GPL-3.0-or-later
#
#################################################################################
#################################################################################
# CORE VARIABLE
#################################################################################
CODENAME=$(lsb_release -cs)

################################################################################
# HELP FUNCTIONS
################################################################################
export NEWT_COLORS='
root=,black
window=,lightgray
shadow=,color8
title=color8,
checkbox=,magenta
entry=,color8
label=blue,
actlistbox=,magenta
actsellistbox=,magenta
helpline=,magenta
roottext=,magenta
emptyscale=magenta
disabledentry=magenta,
'

_norm=$(tput sgr0)
_red=$(tput setaf 1)
_green=$(tput setaf 2)
_tan=$(tput setaf 3)
_cyan=$(tput setaf 6)

function _execute() {
	($1 >>"${OUTTO}" 2>&1)
}
function _print() {
	printf "${_norm}%s${_norm}\n" "$@"
	printf "%s\n" "$@" >>"${OUTTO}"
}
function _info() {
	printf "${_cyan}➜ %s${_norm}\n" "$@"
	printf ">> Info: %s\n" "$@" >>"${OUTTO}"
}
function _success() {
	printf "${_green}✓ %s${_norm}\n" "$@"
	printf ">> Success: %s\n" "$@" >>"${OUTTO}"
}
function _warning() {
	printf "${_tan}⚠ %s${_norm}\n" "$@"
	printf ">> Warning: %s\n" "$@" >>"${OUTTO}"
}
function _error() {
	printf "${_red}✗ %s${_norm}\n" "$@"
	printf ">> Error: %s\n" "$@" >>"${OUTTO}"
}

function _version_gt() { test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; }
#################################################################################
# APP VARIABLE
#################################################################################
APP_TITLE="qBittorrent"
APP_NAME="qbittorrent"
APP_SERVICE="qbittorrent"

APP_LOCK=.$APP_NAME.lock
OUTTO=/srv/dashboard/db/output.log
qbitversion_default=4.6.7
libtversion_default=1.2.19
cdn=$(cat /install/.cdn.lock)
use_static=false

BRANCH_QBIT="https://github.com/qbittorrent/qBittorrent.git"
BRANCH_LIBQBPASS="https://github.com/KozakaiAya/libqbpasswd.git"
FORCE=0

################################################################################
# SCRIPT FUNCTIONS
################################################################################
function _usage() {
	echo -e "\nQuickBox Lite $APP_TITLE Updater"
	echo -e "\nUsage: \n$(basename "$0") [-h] [-l logfile] [-s static] [--qb]"
	echo -e "\nOptions:\n"
	echo "-l, --log <logfile>       specific log file"
	echo "--lt <version>            the Libtorrent version you want to install"
	echo "--qb <version>            the qBittorrent version you want to install"
	echo "--force                   force downgrade qBittorrent"
	echo "--with-cf                 use cloudflare instead of github"
	echo "--with-sf                 use sourceforge instead of github"
	echo "--with-osdn               use osdn(jp)  instead of github"
	echo "--with-github             use github"	
	echo ""
	echo "-h, --help                display this help and exit"
}
################################################################################
# REMOVE FUNCTIONS
################################################################################
function _lockCheck() {
	if [[ -f "/install/.install.lock" ]]; then
		prevApp=$(cat /install/.install.lock)
		_info "$prevApp process running."
		_info "If you believe this to be in error, please manually remove the /install/.install.lock"
		_error "Exiting..."
		exit 1
	fi
	if [[ ! -f "/install/$APP_LOCK" ]]; then
		_error "${APP_TITLE} haven't installed ..."
		exit 1
	fi
}
function _setLock() {
	echo "${APP_TITLE}" >/install/.install.lock
}
function _lockCleanup() {
	rm -f /install/.install.lock
}

function _installDepends() {
	_info "Installing ${APP_TITLE} dependencies..."
	local DEPLIST="${APP_BASEDEPS}"
	for depend in $DEPLIST; do
		_info "Installing ${depend}... "
		_execute "apt-get -y --allow-unauthenticated -f install ${depend}" || { _error "Could not install ${depend}." && dependError=1; }
	done
	if [[ $dependError != "1" ]]; then
		_success "${APP_TITLE} dependencies installed."
	else
		_error "${APP_TITLE} dependencies failed to install."
		exit 1
	fi
}


function _installFpm() {
	fpm -h >/dev/null 2>&1
	exit=$?
	if [[ ! $exit == '0' ]]; then
		_info "Installing fpm package management..."
		_execute "apt-get install -yqq ruby ruby-dev rubygems build-essential"
		_execute "gem install -N fpm"
		_success "fpm installed."
	fi
}

function _updateInfo() {
	_print "
$APP_TITLE will now be updated.

This process may take a few minutes
Please wait until the process is completed
"
}

function _cf() {
	DOMAIN="deb.ezapi.net"
	SUBFOLDER=""
	ARCH="amd64"
	SUFFIX=""
}

function _sf() {
	DOMAIN="sourceforge.net"
	SUBFOLDER="projects/seedbox-software-for-linux/files/"
	ARCH="amd64"
	SUFFIX="/download"
}

function _osdn() {
	DOMAIN="osdn.dl.osdn.net"
	SUBFOLDER="storage/g/s/se/seedbox-software-for-linux/"
	ARCH="amd64"
	SUFFIX=""
}

function _github() {
	DOMAIN="raw.githubusercontent.com"
	SUBFOLDER="amefs/quickbox-files/master/"
	ARCH="amd64"
	SUFFIX=""
}

function _download() {
	# init download url
	PACKAGE=$1
	DEB=$2
	case "$cdn" in
	"cf")
		_cf
		wget -t3 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"sf")
		_sf
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"osdn")
		_osdn
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_github
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_cf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	"github")
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	*)
		_github
		wget -t3 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
		if [ $? -ne 0 ]; then
			_cf
			wget -t5 -T20 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			if [ $? -ne 0 ]; then
				_sf
				wget -t5 -T10 -q -O ${DEB} https://${DOMAIN}/${SUBFOLDER}${CODENAME}/binary-${ARCH}/${PACKAGE}/${DEB}${SUFFIX}
			fi
		fi
		;;
	esac
}

function _updateStatic() {
	if [[ -n ${static_binary} ]]; then
		cd /tmp || exit 1
		wget -t3 -T20 -q -O /usr/local/bin/qbittorrent-nox https://qbit-static.ezapi.net/${static_binary}
		chmod +x /usr/local/bin/qbittorrent-nox
	else
		if [[ ! -f /install/.docker.lock ]]; then
			_info "Install docker for building qBittorrent... "
			rm -f /install/.install.lock
			bash /usr/local/bin/quickbox/package/install/installpackage-docker -l $OUTTO
			echo "qBittorrent" >/install/.install.lock
		fi
			case ${libtversion} in
			1.2.0) libttag="libtorrent_1_2_0" ;;
			1.2.1) libttag="libtorrent_1_2_1" ;;
			1.2.2) libttag="libtorrent_1_2_2" ;;
			1.2.3) libttag="libtorrent_1_2_3" ;;
			1.2.4) libttag="libtorrent_1_2_4" ;;
			1.2.5) libttag="libtorrent_1_2_5" ;;
			1.2.6) libttag="libtorrent_1_2_6" ;;
			1.2.7) libttag="libtorrent_1_2_7" ;;
			1.2.8) libttag="libtorrent-1.2.8" ;;
			1.2.9) libttag="libtorrent-1.2.9" ;;
			1.2.10) libttag="libtorrent-1.2.10" ;;
			1.2.11) libttag="v1.2.11" ;;
			1.2.12) libttag="v1.2.12" ;;
			1.2.13) libttag="v1.2.13" ;;
			1.2.14) libttag="v1.2.14" ;;
			1.1.0) libttag="libtorrent-1_1" ;;
			1.1.1) libttag="libtorrent-1_1_1" ;;
			1.1.2) libttag="libtorrent-1_1_2" ;;
			1.1.3) libttag="libtorrent-1_1_3" ;;
			1.1.4) libttag="libtorrent-1_1_4" ;;
			1.1.5) libttag="libtorrent-1_1_5" ;;
			1.1.6) libttag="libtorrent-1_1_6" ;;
			1.1.7) libttag="libtorrent-1_1_7" ;;
			1.1.8) libttag="libtorrent-1_1_8" ;;
			1.1.9) libttag="libtorrent-1_1_9" ;;
			1.1.10) libttag="libtorrent-1_1_10" ;;
			1.1.11) libttag="libtorrent-1_1_11" ;;
			1.1.12) libttag="libtorrent-1_1_12" ;;
			1.1.13) libttag="libtorrent-1_1_13" ;;
			1.1.14) libttag="libtorrent-1_1_14" ;;
			*) libttag="v${libtversion}" ;;
			esac
		_info "building static qBittorrent... "
		cd /tmp || exit 1
		mkdir -p /tmp/qb-static
		curl -sLo /tmp/qb-static/qbittorrent-nox-static.sh git.io/qbstatic && chmod +x /tmp/qb-static/qbittorrent-nox-static.sh
		docker run -it -v /tmp/qb-static:/root alpine:latest /bin/ash -c "apk update && apk add bash curl && cd && bash ./qbittorrent-nox-static.sh all -i -lt \"${libttag}\" -qt \"release-${qbitversion}\" --cmake" >> $OUTTO 2>&1
		cp /tmp/qb-static/qbt-build/completed/qbittorrent-nox /usr/local/bin/qbittorrent-nox
		chmod +x /usr/local/bin/qbittorrent-nox
		_info "cleaning up... "
		rm -rf /tmp/qb-static
	fi
}


function _updateApp() {
	# get current version
	if [ -z "${qbitversion}" ]; then
		qbitversion=${qbitversion_default}
	fi
	if [ -z "${libtversion}" ]; then
		libtversion=${libtversion_default}
	fi
	qbit_major_version=$(echo ${qbitversion}| cut -d. -f1,2)
	libt_major_version=$(echo ${libtversion}| cut -d. -f1,2)
	cur_version=$(dpkg -s qbittorrent-nox 2>/dev/null | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1)
	if [[ -z ${cur_version} ]]; then cur_version=$(qbittorrent-nox -v 2>/dev/null | grep '^qBittorrent ' | grep -Eo "[0-9.]+" | head -n1); fi
	if (_version_gt ${qbitversion} ${cur_version}) ||  [[ $FORCE == 1 ]] ; then
		_info "Upgrading ${APP_TITLE}..."
		_info "Removing old ${APP_TITLE}..."
		userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
		for username in $userlist; do
			_execute "systemctl stop ${APP_SERVICE}@${username}"
		done
		if [[ -n $(dpkg -s qbittorrent-nox 2>/dev/null | grep '^Version:' | grep -Eo "[0-9.]+" | head -n1) ]]; then						
			_execute "apt-mark unhold qbittorrent-nox"
			_execute "apt remove -y qbittorrent-nox"		
		else
			rm -f /usr/local/bin/qbittorrent-nox
		fi
		_info "Fetching package list..."
		cd /tmp || exit 1
		wget -t3 -T20 -q -O file.lst https://qbit-static.ezapi.net/file.lst
		static_binary=$(cat file.lst | grep -w "qbittorrent-nox.qbit${qbitversion}_lt${libtversion}.amd64" | awk '{ print $4}')
		rm -f file.lst
		_updateStatic
		# Update qbittorrent-nox binary location
		BINPATH=$(which qbittorrent-nox)
		if [[ $CODENAME == bionic ]]; then
			cat >/etc/systemd/system/qbittorrent@.service <<QBS
[Unit]
Description=qBittorrent Daemon Service
After=network.target

[Service]
Environment="SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt"
Environment="SSL_CERT_DIR=/etc/ssl/certs"
Type=simple
User=%I
LimitNOFILE=infinity
ExecStart=${BINPATH}
ExecStop=/usr/bin/killall -w -s 9 ${BINPATH}
TimeoutSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
QBS
		else
			cat >/etc/systemd/system/qbittorrent@.service <<QBS
[Unit]
Description=qBittorrent Daemon Service
After=network.target

[Service]
Environment="SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt"
Environment="SSL_CERT_DIR=/etc/ssl/certs"
Type=exec
User=%I
LimitNOFILE=infinity
ExecStart=${BINPATH}
ExecStop=/usr/bin/killall -w -s 9 ${BINPATH}
TimeoutSec=300
Restart=on-failure

[Install]
WantedBy=multi-user.target
QBS
		fi
		_execute "systemctl daemon-reload"
		if (_version_gt ${qbitversion} 4.1.9.1) && (_version_gt 4.2.0 ${cur_version}); then
			_reconfigureAppv2
		elif (_version_gt 4.2.0 ${qbitversion}) && (_version_gt ${cur_version} 4.1.9.1); then
			_reconfigureAppv1
		fi
		userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
		for username in $userlist; do
			_execute "systemctl start ${APP_SERVICE}@${username}"
		done
		_success "${APP_TITLE} is now update to date."
	else
		_warning "Nothing to be update"
	fi
}

function _reconfigureAppv1() {
	_info "Configuring ${APP_TITLE}..."
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
			password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)

		ha1pass=$(echo -n "${password}" | md5sum | cut -f1 -d' ')
		sed -i "s|Password_PBKDF2.*|Password_ha1=@ByteArray(${ha1pass})|g" /home/${username}/.config/qBittorrent/qBittorrent.conf
	done
	_success "${APP_TITLE} configured."
}

function _reconfigureAppv2() {
	_info "Configuring ${APP_TITLE}..."
	# get libqbpasswd
	## See https://github.com/KozakaiAya/libqbpasswd
	cd /tmp
	_info "Building libqbpasswd ... "
	_execute "apt-get install -yqq build-essential"
	_execute "git clone ${BRANCH_LIBQBPASS} libqbpasswd"
	cd libqbpasswd
	_execute "make"
	_execute "cp -f qb_password_gen /usr/local/bin/quickbox/system/auxiliary/qb_password_gen"
	cd /tmp
	rm -rf /tmp/libqbpasswd
	
	# get userlist
	userlist=$(cat $(find /root/.qbuser/ -type f) | cut -d: -f1)
	for username in $userlist; do
		passphrase=$(cat /root/.ssh/local_user)
		passtext=$(cat /root/.qbuser/${username}.info | cut -d: -f2)
		password=$(echo ${passtext} | openssl enc -aes-128-ecb -pbkdf2 -a -d -pass pass:"${passphrase}" -nosalt)

		pbkdf2pass=$(/usr/local/bin/quickbox/system/auxiliary/qb_password_gen ${password})
		sed -i "s|Password_ha1.*|Password_PBKDF2=\"@ByteArray(${pbkdf2pass})\"|g" /home/${username}/.config/qBittorrent/qBittorrent.conf
	done
	_success "${APP_TITLE} configured."
}

#################################################################################
# OPT GENERATOR
#################################################################################
if ! ARGS=$(getopt -a -o hsl: -l help,force,static,with-cf,with-sf,with-osdn,with-github,log:,qb: -- "$@")
then
    _usage
    exit 1
fi
eval set -- "${ARGS}"
while true; do
	case "$1" in
	-h | --help)
		_usage
		exit 1
		;;
	--force)
		FORCE=1
		;;
	-l | --log)
		OUTTO="$2"
		shift
		;;
	--qb)
		qbitversion="$2"
		shift
		;;
	--lt)
		libtversion="$2"
		shift
		;;
	--with-cf)
		cdn="cf"
		;;
	--with-sf)
		cdn="sf"
		;;
	--with-osdn)
		cdn="osdn"
		;;
	--with-github)
		cdn="github"
		;;
	--)
		shift
		break
		;;
	esac
	shift
done

#################################################################################
# MAIN PROCESS
#################################################################################
_lockCheck
_setLock
_updateInfo
_updateApp
_lockCleanup
